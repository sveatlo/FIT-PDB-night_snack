// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package snacker

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnackerClient is the client API for Snacker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnackerClient interface {
}

type snackerClient struct {
	cc grpc.ClientConnInterface
}

func NewSnackerClient(cc grpc.ClientConnInterface) SnackerClient {
	return &snackerClient{cc}
}

// SnackerServer is the server API for Snacker service.
// All implementations must embed UnimplementedSnackerServer
// for forward compatibility
type SnackerServer interface {
	mustEmbedUnimplementedSnackerServer()
}

// UnimplementedSnackerServer must be embedded to have forward compatible implementations.
type UnimplementedSnackerServer struct {
}

func (UnimplementedSnackerServer) mustEmbedUnimplementedSnackerServer() {}

// UnsafeSnackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnackerServer will
// result in compilation errors.
type UnsafeSnackerServer interface {
	mustEmbedUnimplementedSnackerServer()
}

func RegisterSnackerServer(s grpc.ServiceRegistrar, srv SnackerServer) {
	s.RegisterService(&Snacker_ServiceDesc, srv)
}

// Snacker_ServiceDesc is the grpc.ServiceDesc for Snacker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Snacker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snacker.Snacker",
	HandlerType: (*SnackerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "proto/snacker/snacker.proto",
}
